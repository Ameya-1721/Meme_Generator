{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Project(Me)\\\\Meme_Generator_Mini_Project_Sem_3\\\\Left\\\\src\\\\TempGen.js\";\nimport React, { Component } from \"react\";\nimport \"./Generator.css\";\nimport * as svg from \"save-svg-as-png\";\nconst initialState = {\n  toptext: \"\",\n  bottomtext: \"\",\n  isTopDragging: false,\n  isBottomDragging: false,\n  topX: \"50%\",\n  topY: \"10%\",\n  bottomX: \"50%\",\n  bottomY: \"90%\"\n};\n\nclass TempGen extends Component {\n  constructor() {\n    super();\n\n    this.getStateObj = (e, type) => {\n      let rect = this.imageRef.getBoundingClientRect();\n      const xOffset = e.clientX - rect.left;\n      const yOffset = e.clientY - rect.top;\n      let stateObj = {};\n\n      if (type === \"bottom\") {\n        stateObj = {\n          isBottomDragging: true,\n          isTopDragging: false,\n          bottomX: `${xOffset}px`,\n          bottomY: `${yOffset}px`\n        };\n      } else if (type === \"top\") {\n        stateObj = {\n          isTopDragging: true,\n          isBottomDragging: false,\n          topX: `${xOffset}px`,\n          topY: `${yOffset}px`\n        };\n      }\n\n      return stateObj;\n    };\n\n    this.changeText = event => {\n      this.setState({\n        [event.currentTarget.id]: event.currentTarget.value\n      });\n      let type = event.currentTarget.name;\n      this.resizeText(type);\n    };\n\n    this.handleMouseDown = (e, type) => {\n      const stateObj = this.getStateObj(e, type);\n      document.addEventListener(\"mousemove\", event => this.handleMouseMove(event, type));\n      this.setState({ ...stateObj\n      });\n    };\n\n    this.handleMouseMove = (e, type) => {\n      if (this.state.isTopDragging || this.state.isBottomDragging) {\n        let stateObj = {};\n\n        if (type === \"bottom\" && this.state.isBottomDragging) {\n          stateObj = this.getStateObj(e, type);\n        } else if (type === \"top\" && this.state.isTopDragging) {\n          stateObj = this.getStateObj(e, type);\n        }\n\n        this.setState({ ...stateObj\n        });\n      }\n    };\n\n    this.handleMouseUp = event => {\n      document.removeEventListener(\"mousemove\", this.handleMouseMove);\n      this.setState({\n        isTopDragging: false,\n        isBottomDragging: false\n      });\n    };\n\n    this.saveMeme = () => {\n      let name = document.getElementById(\"memename\").value;\n      name.length > 0 ? svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), `${name}.png`) : svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), \"meme.png\");\n    };\n\n    this.resetBoxes = () => {\n      this.setState({\n        toptext: \"\",\n        bottomtext: \"\",\n        topX: \"50%\",\n        topY: \"10%\",\n        bottomX: \"50%\",\n        bottomY: \"90%\"\n      });\n      document.getElementById(\"toptext\").value = \"\";\n      document.getElementById(\"bottomtext\").value = \"\";\n      document.getElementById(\"memename\").value = \"\";\n      document.getElementById(\"tiptoptext\").style.fontSize = \"50px\";\n      document.getElementById(\"bittybottomtext\").style.fontSize = \"50px\";\n    };\n\n    this.resizeText = type => {\n      let currentWidth = document.getElementById(type).textLength.baseVal.value;\n      let imageWidth = this.props.meme.width;\n\n      if (currentWidth > imageWidth) {\n        document.getElementById(type).style.fontSize = `${imageWidth / currentWidth * 40}px`;\n      }\n    };\n\n    this.state = { ...initialState\n    };\n  }\n\n  render() {\n    const image = this.props.meme;\n    var wrh = image.width / image.height;\n    var newWidth = 500;\n    var newHeight = newWidth / wrh;\n    const textStyle = {\n      fontFamily: \"Impact\",\n      fontSize: \"50px\",\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h1\",\n      onClick: () => this.props.toggleSelected(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"MEME GENERATOR\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"meme-gen-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      id: \"svg_ref\",\n      ref: el => {\n        this.svgRef = el;\n      },\n      height: newHeight,\n      width: newWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"image\", {\n      ref: el => {\n        this.imageRef = el;\n      },\n      xlinkHref: this.props.meme.url,\n      height: newHeight,\n      width: newWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      id: \"tiptoptext\",\n      style: { ...textStyle,\n        zIndex: this.state.isTopDragging ? 4 : 1\n      },\n      x: this.state.topX,\n      y: this.state.topY,\n      dominantBaseline: \"middle\",\n      textAnchor: \"middle\",\n      onMouseDown: event => this.handleMouseDown(event, \"top\"),\n      onMouseUp: event => this.handleMouseUp(event, \"top\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, this.state.toptext), /*#__PURE__*/React.createElement(\"text\", {\n      id: \"bittybottomtext\",\n      style: textStyle,\n      dominantBaseline: \"middle\",\n      textAnchor: \"middle\",\n      x: this.state.bottomX,\n      y: this.state.bottomY,\n      onMouseDown: event => this.handleMouseDown(event, \"bottom\"),\n      onMouseUp: event => this.handleMouseUp(event, \"bottom\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }, this.state.bottomtext)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"meme-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"tiptoptext\",\n      id: \"toptext\",\n      placeholder: \"Add text to the top\",\n      onChange: this.changeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"bittybottomtext\",\n      id: \"bottomtext\",\n      placeholder: \"Add text to the bottom\",\n      onChange: this.changeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      id: \"memename\",\n      placeholder: \"Save meme as...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.saveMeme,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }, \"Download Meme :D\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.resetBoxes,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.props.toggleSelected(),\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    }, \"Back to Gallery\")))));\n  }\n\n}\n\nexport default TempGen;","map":{"version":3,"sources":["C:/xampp/htdocs/Project(Me)/Meme_Generator_Mini_Project_Sem_3/Left/src/TempGen.js"],"names":["React","Component","svg","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topX","topY","bottomX","bottomY","TempGen","constructor","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","changeText","event","setState","currentTarget","id","value","name","resizeText","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","saveMeme","getElementById","length","saveSvgAsPng","resetBoxes","style","fontSize","currentWidth","textLength","baseVal","imageWidth","props","meme","width","render","image","wrh","height","newWidth","newHeight","textStyle","fontFamily","textTransform","fill","stroke","userSelect","toggleSelected","el","svgRef","url","zIndex"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Generator.css\";\r\nimport * as svg from \"save-svg-as-png\";\r\n\r\nconst initialState = {\r\n    toptext: \"\",\r\n    bottomtext: \"\",\r\n    isTopDragging: false,\r\n    isBottomDragging: false,\r\n    topX: \"50%\",\r\n    topY: \"10%\",\r\n    bottomX: \"50%\",\r\n    bottomY: \"90%\",\r\n};\r\n\r\nclass TempGen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            ...initialState\r\n        };\r\n    }\r\n\r\n    getStateObj = (e, type) => {\r\n        let rect = this.imageRef.getBoundingClientRect();\r\n        const xOffset = e.clientX - rect.left;\r\n        const yOffset = e.clientY - rect.top;\r\n        let stateObj = {};\r\n        if (type === \"bottom\") {\r\n            stateObj = {\r\n                isBottomDragging: true,\r\n                isTopDragging: false,\r\n                bottomX: `${xOffset}px`,\r\n                bottomY: `${yOffset}px`,\r\n            };\r\n        } else if (type === \"top\") {\r\n            stateObj = {\r\n                isTopDragging: true,\r\n                isBottomDragging: false,\r\n                topX: `${xOffset}px`,\r\n                topY: `${yOffset}px`,\r\n            };\r\n        }\r\n        return stateObj;\r\n    };\r\n\r\n    changeText = (event) => {\r\n        this.setState({\r\n            [event.currentTarget.id]: event.currentTarget.value,\r\n        });\r\n        let type = event.currentTarget.name\r\n        this.resizeText(type)\r\n    };\r\n\r\n    handleMouseDown = (e, type) => {\r\n        const stateObj = this.getStateObj(e, type);\r\n        document.addEventListener(\"mousemove\", (event) =>\r\n            this.handleMouseMove(event, type)\r\n        );\r\n        this.setState({\r\n            ...stateObj,\r\n        });\r\n    };\r\n\r\n    handleMouseMove = (e, type) => {\r\n        if (this.state.isTopDragging || this.state.isBottomDragging) {\r\n            let stateObj = {};\r\n            if (type === \"bottom\" && this.state.isBottomDragging) {\r\n                stateObj = this.getStateObj(e, type);\r\n            } else if (type === \"top\" && this.state.isTopDragging) {\r\n                stateObj = this.getStateObj(e, type);\r\n            }\r\n            this.setState({\r\n                ...stateObj,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleMouseUp = (event) => {\r\n        document.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n        this.setState({\r\n            isTopDragging: false,\r\n            isBottomDragging: false,\r\n        });\r\n    };\r\n\r\n    saveMeme = () => {\r\n        let name = document.getElementById(\"memename\").value\r\n        name.length > 0 ?\r\n            svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), `${name}.png`) :\r\n            svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), \"meme.png\")\r\n    };\r\n\r\n    resetBoxes = () => {\r\n        this.setState({\r\n            toptext: \"\",\r\n            bottomtext: \"\",\r\n            topX: \"50%\",\r\n            topY: \"10%\",\r\n            bottomX: \"50%\",\r\n            bottomY: \"90%\"\r\n        });\r\n        document.getElementById(\"toptext\").value = \"\";\r\n        document.getElementById(\"bottomtext\").value = \"\";\r\n        document.getElementById(\"memename\").value = \"\";\r\n        document.getElementById(\"tiptoptext\").style.fontSize = \"50px\"\r\n        document.getElementById(\"bittybottomtext\").style.fontSize = \"50px\"\r\n    }\r\n\r\n    resizeText = (type) => {\r\n        let currentWidth = document.getElementById(type).textLength.baseVal.value\r\n        let imageWidth = this.props.meme.width\r\n        if (currentWidth > imageWidth) {\r\n            document.getElementById(type).style.fontSize = `${(imageWidth / currentWidth) * 40}px`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const image = this.props.meme;\r\n        var wrh = image.width / image.height;\r\n        var newWidth = 500;\r\n        var newHeight = newWidth / wrh;\r\n\r\n        const textStyle = {\r\n            fontFamily: \"Impact\",\r\n            fontSize: \"50px\",\r\n            textTransform: \"uppercase\",\r\n            fill: \"#FFF\",\r\n            stroke: \"#000\",\r\n            userSelect: \"none\"\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"h1\" onClick={() => this.props.toggleSelected()}>\r\n                    MEME GENERATOR\r\n                </div>\r\n                <div className=\"main-content\">\r\n                    <div className=\"meme-gen-modal\">\r\n                        <svg\r\n                            id=\"svg_ref\"\r\n                            ref={(el) => { this.svgRef = el; }}\r\n                            height={newHeight}\r\n                            width={newWidth}\r\n                        >\r\n                            <image\r\n                                ref={(el) => {\r\n                                    this.imageRef = el;\r\n                                }}\r\n                                xlinkHref={this.props.meme.url}\r\n                                height={newHeight}\r\n                                width={newWidth}\r\n                            />\r\n\r\n                            <text\r\n                                id=\"tiptoptext\"\r\n                                style={{ ...textStyle, zIndex: this.state.isTopDragging ? 4 : 1 }}\r\n                                x={this.state.topX}\r\n                                y={this.state.topY}\r\n                                dominantBaseline=\"middle\"\r\n                                textAnchor=\"middle\"\r\n                                onMouseDown={(event) => this.handleMouseDown(event, \"top\")}\r\n                                onMouseUp={(event) => this.handleMouseUp(event, \"top\")}\r\n                            >\r\n                                {this.state.toptext}\r\n                            </text>\r\n\r\n                            <text\r\n                                id=\"bittybottomtext\"\r\n                                style={textStyle}\r\n                                dominantBaseline=\"middle\"\r\n                                textAnchor=\"middle\"\r\n                                x={this.state.bottomX}\r\n                                y={this.state.bottomY}\r\n                                onMouseDown={(event) => this.handleMouseDown(event, \"bottom\")}\r\n                                onMouseUp={(event) => this.handleMouseUp(event, \"bottom\")}\r\n                            >\r\n                                {this.state.bottomtext}\r\n                            </text>\r\n                        </svg>\r\n                        <div className=\"meme-form\">\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                name=\"tiptoptext\"\r\n                                id=\"toptext\"\r\n                                placeholder=\"Add text to the top\"\r\n                                onChange={this.changeText}\r\n                            />\r\n\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                name=\"bittybottomtext\"\r\n                                id=\"bottomtext\"\r\n                                placeholder=\"Add text to the bottom\"\r\n                                onChange={this.changeText}\r\n                            />\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                id=\"memename\"\r\n                                placeholder=\"Save meme as...\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button onClick={this.saveMeme} className=\"btn btn-primary\">Download Meme :D</button>\r\n                            <button onClick={this.resetBoxes} className=\"btn btn-primary\">Reset</button>\r\n                            <button onClick={() => this.props.toggleSelected()} className=\"btn btn-primary\">Back to Gallery</button>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TempGen;\r\n"]},"metadata":{},"sourceType":"module"}